1.What instruction is “int a, b, c, d;” converted to? 

 subl $16 , %esp

2.Does “int a, b, c, d;” shrink or grow the stack? How many bytes are allocated on stack for a, b, c, and d? Explain them using instruction from question 1.

 This grows the stack (conceptually we are adding data to main therefore we need to create more space for it to go).
 The %esp register holds the address to the top of the stack. Subtracting '16' from the address currently in %esp now 
 changes the value of the address in %esp to a 'lower' address. We say lower because the stack grows from high to low therefore
 the top of the stack holds the lowest address. In terms of bytes, each integer is 4 bytes on a 32-bit machine. Consider the 
 instruction subl $16 , %esp. The immediate value is 16 because we have 4 integers, which are 4 bytes each therefore, we are moving
 the address in register %esp to an address 16 bytes away in order to make room for each integer declared. 

3.What instruction is “b=2;” converted to? How is the address of variable b formed in the instruction?

 The instruction for "b=2" converts to movl $2 , -8(%ebp). The %ebp register holds the address to the bottom of the current stack frame. In
 a stack frame the bottom does not change unlike the top of the stack frame which is constantly moving. Register %ebp holds the address
 that points to where main was declared considering that was the first instruction in the stack frame. The next addresses are 4 bytes
 away from eachother and increment in factors of 4 from the bottom of the stack considering we declared integers. The first declaration
 "a=1" is 4 bytes away from %ebp. Now, for "b=2", we are moving another 4 bytes away from the address that refers to a whch is also 
 8 bytes away from the address that refers to main. That is why the instruction movl $2 , -8(%ebp) translates to "b=2".

4.Based on the instructions converted from four assignments, can we claim the declaration order determines the allocation order? For instance, a is declared before b, does it mean a is to be allocated before b on stack? Verify your theory by changing the declaration to “int a, c, b, d;”

 Declaration order does determine the allocation order in terms of how many bytes each variable is from the bottom of the stack. For 
 instance, declaring "int a,b,c,d;" 
 
 int a would be 4 bytes away from %ebp hence the instruction "movl $somevalue, -4(%ebp)"
 int b would be 8 bytes away from %ebp hence the instruction "movl $somevalue, -8(%ebp)"
 and so on...

 Now, if we were to declare the integers in a difference order such as "int a,c,b,d;"

 int a would be 4 bytes away from %ebp hence the instruction "movl $somevalue, -4(%ebp)" //considering this did not change
 int c would actually be the variable that is 8 bytes away from %ebp hence the instruction "movl $somevalue, -8(%ebp)"
 int b would now be 12 bytes away from %ebp hence the instruction "movl $somevalue, -12(%ebp)" 
 and so on...
 
 

 

